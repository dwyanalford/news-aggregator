// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String                @unique
  password              String
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]             @relation("UserToAccount")  // Relation to Account
  sessions              Session[]             @relation("UserToSession")  // Relation to Session
  savedArticles         UserSavedArticle[]    @relation("UserToUserSavedArticle")  // Relation to UserSavedArticle
  userSavedArticleTags  UserSavedArticleTag[] @relation("UserToUserSavedArticleTags")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  user              User    @relation(fields: [userId], references: [id], name: "UserToAccount") // Relation to User

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], name: "UserToSession") // Relation to User
}

model SavedArticle {
  id        String                @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  date      DateTime
  link      String                @unique
  summary   String
  imageURL  String?
  author    String?
  source    String
  category  String?               // AI will determine this
  region    String?               // Pulled from RSS feed
  users     UserSavedArticle[]    @relation("SavedArticleToUserSavedArticle")
}

model UserSavedArticle {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  userId               String                @db.ObjectId
  articleId            String                @db.ObjectId
  user                 User                  @relation(fields: [userId], references: [id], name: "UserToUserSavedArticle")
  savedArticle         SavedArticle          @relation(fields: [articleId], references: [id], name: "SavedArticleToUserSavedArticle")
  userSavedArticleTags UserSavedArticleTag[] @relation("UserSavedArticleToUserSavedArticleTags") 
}

model Tag {
  id                  String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                String                 @unique
  userSavedArticleTags UserSavedArticleTag[]  @relation("TagToUserSavedArticleTags")  // Relation to UserSavedArticleTag
}

model UserSavedArticleTag {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  userSavedArticleId  String            @db.ObjectId
  tagId               String            @db.ObjectId
  userId              String            @db.ObjectId  // New field to link the tag to a specific user
  userSavedArticle    UserSavedArticle  @relation(fields: [userSavedArticleId], references: [id], name: "UserSavedArticleToUserSavedArticleTags")
  tag                 Tag               @relation(fields: [tagId], references: [id], name: "TagToUserSavedArticleTags")
  user                User              @relation(fields: [userId], references: [id], name: "UserToUserSavedArticleTags")  // New relation to User
}

model RSSFeed {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  url         String   @unique
  purpose     String
  logo        String?  // Updated field name
  active      Boolean  @default(true)
  region      String   @default("USA")
  createdAt   DateTime @default(now())
  failureCount Int      @default(0) // Tracks consecutive failures before deactivation
}