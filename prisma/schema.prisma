// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Model definitions

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String        @unique
  password       String
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  savedArticles  UserSavedArticle[] // Use the join table to manage relationship
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  user              User    @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
}

model SavedArticle {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  date      DateTime
  link      String   @unique
  summary   String
  imageURL  String?
  users     UserSavedArticle[]
}

// create an explicit relation model to represent the many-to-many relationship between User and SavedArticle

model UserSavedArticle {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  userId       String       @db.ObjectId
  articleId    String       @db.ObjectId
  user         User         @relation(fields: [userId], references: [id])
  savedArticle SavedArticle @relation(fields: [articleId], references: [id])

  @@index([userId])
  @@index([articleId])
}